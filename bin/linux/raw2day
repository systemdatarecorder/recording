#!/opt/sdr/perl/bin/perl
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;
use Date::Calc qw{:all};
use Time::HiRes qw(gettimeofday);
use File::Copy;
use Sys::Hostname;
use File::Basename;
use Digest::SHA;
use WWW::Curl::Easy;
use XML::LibXML;
use XML::LibXML::XPathContext;


# Debug Only
# use Data::Dumper;

# Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hvVt:q') or usage();
usage() if defined $main::opt_h;
revision() if defined $main::opt_V;
usage() if (($#ARGV+1) >= 1);
my $verbose_flag = defined $main::opt_v ? $main::opt_v : 0;
my $quiet_flag = defined $main::opt_q ? $main::opt_q : 0;

# Global Vars
my $hport      = 80;          # HTTP default port
my $sport      = 22;          # SSH2 default port
my $osname     = $^O;         # OS name via Perl
my $tcpka      = 0;           # TCP KA flag
my $trans_flag = 0;           # Transport flag, default false
my $ttype;                    # Transport mode
my $xmlcnf     = 'sdr.conf';  # sdr configuration name
$main::opt_h   = 0;           # help option
$main::opt_V   = 0;           # revision option
my ($hproxy, $hproxyport);

my $conf;

local $| = 1;                 # autoflush


# ######### #
# MAIN BODY #
# ######### #

my ($sdr_current, $sdr_daily, $pkey);
my ($sdrid, $dr);

#start counting here
my $tstart = gettimeofday();

# check modules
my $argv_flag = 0;
$argv_flag = 1 if (($#ARGV+1) > 0);


# check for transport mode
if (defined $main::opt_t) {
    # check for separator
    usage() if $main::opt_t !~ /(http|ftp|scp|sftp)/i;
    $ttype = $main::opt_t;
    $trans_flag = 1;
}

my $host = hostname;
$host =~ s/\..*$// if $host =~ /\./;

# get sdr.conf config
# validate and open configuration xml
$conf = open_conf($xmlcnf);

my $rchilds = 0;
my @sdrdlog = $conf->findnodes("/sdr/recording/logs/*");

foreach my $node (@sdrdlog) {

    next if $node -> nodeName() !~ /base|current|daily/;

    # current log
    if ( $node->nodeName() =~ /current/ ) {
        $sdr_current = $node->getAttribute('path');
    }

    # daily log
    if ( $node->nodeName() =~ /daily/ ) {
        $sdr_daily = $node->getAttribute('path');
    }

    $rchilds++;
}

# check errors
if ($rchilds == 0) {
    die "error: main - wrong configuration file: $xmlcnf, " ,
          "$rchilds recording elements found \n";
}

if (!($sdr_current)) {
    die "error: main - wrong configuration file: $xmlcnf, ",
          "current path not found\n";
}

if (!($sdr_daily)) {
    die "error: main - wrong configuration file: $xmlcnf, ",
          "daily path not found\n";
}

# Verbose Messages
if ( $verbose_flag == 1 ) {
    print "info: main - recording hostname: $host \n";
    print "info: main - current log dir: $sdr_current \n";
    print "info: main - daily log dir: $sdr_daily \n";
}

my $dprev = get_yesterday();

if ( $verbose_flag == 1 ) {
    printf "%s %s\n", "info: main - sdrd data dir:", $dprev;
}

# Current to Daily
my $dsdrd = rotate($sdr_current, $sdr_daily, $dprev);


## Transport Mode

if ( $trans_flag ) {

    # Verbose Messages
    if ( $verbose_flag == 1 ) {
        print "info: main - transport mode ON\n";
    }

    # key, subscription, destination, tcpka
    my @transcfg = $conf->findnodes("/sdr/recording/transport/*");
    foreach my $node (@transcfg) {

        # private_key
        if ( $node->nodeName() =~ /private_key/ ) {
            $pkey = $node->getAttribute('path');
        }

        # subscription
        if ( $node->nodeName() =~ /subscription/ ) {
            $sdrid = $node->textContent();
        }

        # destination
        if ( $node->nodeName() =~ /destination/ ) {
            $dr = $node->textContent();
        }

        # keepalive
        if ( $node->nodeName() =~ /tcp_keepalive/ ) {
            $tcpka = $node->textContent();
        }
    }

    die "error: main - no subscription defined, check sdr.conf\n"
        if ( ! $sdrid );

    ## Reporting Config XML
    my ($db_path, $dc_path, $dest, $user, $pass);

    # Reporting XML Configuration
    # XPATH Method
    my @res = $conf->findnodes('//host');

    foreach my $node (@res) {

        # destination
        $dest = $node->getAttribute('name');

        # username, password
        $user = $node->getElementsByTagName('username');
        $pass = $node->getElementsByTagName('password');

        # Verbose Messages
        if ( $verbose_flag == 1 ) {
            printf "%s\n", "info: main - transport destination: $dr";
        }

        if ( $dr eq $dest ) {
            if ( $node->getElementsByTagName('http') ) {
                my @http_transport =
                  get_transport( $conf,
                    "/sdr/reporting/host[\@name=\"$dest\"]/http/*" );


            if ( $#http_transport == 0 ) { $hport      = $http_transport[0]; }
         elsif ( $#http_transport == 1 ) { $hport      = $http_transport[0];
                                           $hproxy     = $http_transport[1]; }
         elsif ( $#http_transport == 2 ) { $hport      = $http_transport[0];
                                           $hproxy     = $http_transport[1];
                                           $hproxyport = $http_transport[2]; }

            }

            if ( $node->getElementsByTagName('ssh2') ) {
                my @ssh2_transport =
                  get_transport( $conf,
                    "/sdr/reporting/host[\@name=\"$dest\"]/ssh2/*" );


                if ( $#ssh2_transport == 0 ) {
                    $sport = $ssh2_transport[0];
                }

            }

            ## we found a match
            last;
        }

    } # for loop

    my $destdir = '/' . $sdrid . "/content/hosts/" . $host . "/raw";

    # FTP Transport
    if ( $ttype =~ /^ftp$/i ) {

        if ($verbose_flag == 1) {
            printf "%s\n", "info: main - transport protocol: FTP";
        }
        trans2ftp($sdr_daily, $destdir, $dprev, $dest, $user, $pass);

    # SCP Transport
    } elsif ( $ttype =~ /^scp$/i ) {        

        if ($verbose_flag == 1) {
            printf "%s\n", "info: main - transport protocol: SCP";
        }
        trans2scp($sdr_daily, $destdir, $dprev, $dest, $sport, $user, $pass);

    # SFTP Transport
    } elsif ( $ttype =~ /^sftp$/i ) {
        if ($verbose_flag == 1) {
            printf "%s\n", "info: main - transport protocol: SFTP";
        }
        trans2sftp($sdr_daily, $destdir, $dprev, $dest, $sport, $user, $pass);

    # HTTP Transport
    } elsif ( $ttype =~ /^http$/i ) {
        if ( $verbose_flag == 1 ) {
            printf "%s\n", "info: main - transport protocol: HTTP";
        }
        my $sdrd_dir = $sdr_daily . '/' . $dprev;
        my $shipment = tarsdrd($sdrd_dir);

        if ( $verbose_flag == 1 ) {
            printf "%s\n", "info: main - sdrd tar shipment: $shipment";
        }

        # init HTTP transport
        my $http = WWW::Curl::Easy->new;

        if ( $tcpka ) {
            $http->setopt( WWW::Curl::Easy::CURLOPT_TCP_KEEPALIVE(), 1 );
        }

        trans2http($http, $dest, $sdrid, $destdir, $shipment, $hport, $hproxy);

        my $rmship = rmsdrd($shipment);
            
        if ($verbose_flag == 1) {
            if ( $rmship == 0 ) {
                printf "%s\n",
                    "info: main - sdrd tar shipment clean-up: done";
            } elsif ( $rmship == 1 ) {
                printf "%s\n",
                    "info: main - sdrd tar shipment clean-up: failed, $rmship"; 
            }
        }
    }
}
#}
#}

## Mark End of Time
my $tend = gettimeofday();
my $elapsed = $tend - $tstart;
my $len = length(int($elapsed));

if ($quiet_flag == 0) {
    if ($len > 2) {
        # we are working in minutes
        $elapsed = $elapsed / 60;
        printf "%s %4.2f %s", 
           "All jobs done. Elapsed time:", $elapsed, "minutes\n";
    } else {
        printf "%s %4.2f %s", 
            "All jobs done. Elapsed time:", $elapsed, "seconds\n";
    }
}



## Subroutines

sub get_transport {

    my ( $conf, $path ) = @_;
    my ( $port, $proxy, $proxyport );
    my @result;

    #XPath Walking
    my @childs = $conf->findnodes($path);

    foreach my $node (@childs) {

        if ( $node->nodeName() =~ /^port$/ ) {
            $port = $node->textContent(); 
        } elsif ( $node->nodeName() =~ /^proxy$/ ) {
            $proxy = $node->textContent(); 
        } elsif ( $node->nodeName() =~ /^proxyport$/ ) {
            $proxyport = $node->textContent(); 
        }

        # given ( $node->nodeName() ) {
        #     when (/^port$/)      { $port      = $node->textContent(); }
        #     when (/^proxy$/)     { $proxy     = $node->textContent(); }
        #     when (/^proxyport$/) { $proxyport = $node->textContent(); }
        #}
    }

    if ( defined($proxy) and defined($proxyport) ) {
        push @result, ( $port, $proxy, $proxyport );
    }
    else {
        push @result, $port;
    }

    ## debug
    # print "port=$port proxy=$proxy proxyport=$proxyport \n";

    # return array of coordinates for http or ssh2
    return @result;
}



# get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}



# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: raw2day [-hV] [-t http|ftp|scp|sftp]
  e.g. raw2day               rotate raw data to daily log
       raw2day -t http       transport sdrd files over HTTP
       raw2day -t ftp        transport sdrd files over FTP
       raw2day -t sftp       transport sdrd files over SFTP
       raw2day -t scp        transport sdrd files over SCP
END
    exit 0;
}


sub ftp_mput { 
    my($ftp, $pattern) = @_; 
    foreach my $file (glob($pattern)) {
        $ftp->put($file) or warn $ftp->message; 
    }
    return;
}


sub ftp_mget { 
    my($ftp, $pattern) = @_; 
    foreach my $file ($ftp->ls($pattern)) { 
        $ftp->get($file) or warn $ftp->message; 
    }
    return;
}


# transport mode: ftp
sub trans2ftp {

    my ($sdir, $ddir, $prevday, $dest, $user, $pass) = @_;

    require Net::FTP;

    my $ftp = Net::FTP->new($dest, Debug => 0, Timeout=>60)
      or die "error: trans2ftp - cannot connect to $dest: $@\n";

    $ftp->login($user,$pass)
     or die "error: trans2ftp - cannot login ", $ftp->message;

    if (! $ftp->cwd("$ddir/$prevday")) {
        $ftp->mkdir("$ddir/$prevday") or
            die "error: trans2ftp - cannot create daily directory\n";

        $ftp->cwd("$ddir/$prevday");
    }


    # copy now all raw files into prevdir
    opendir(PREVDAY, "$sdir/$prevday") or
        die "error: trans2ftp - can't open $sdir/$prevday: $!\n";
    my @sdrdf = grep {!/^\.+$/} readdir(PREVDAY);
    close(PREVDAY);

    chdir "$sdir/$prevday" or 
        die "error: trans2ftp - cannot change local directory: $!\n";

    my $tftp = 0;
    foreach my $sdrd (@sdrdf) {
        next if $sdrd !~ /.*\.sdrd\.0\.gz$/;
        $ftp->put("$sdrd") or warn $ftp->message; 
        $tftp++;
    }

    $ftp->quit;

    return;
}



# transport mode: SFTP
sub trans2sftp {

    my ($sdir, $ddir, $prevday, $dest, $port, $user, $pass) = @_;

    my $sftp;

    require Net::SFTP::Foreign;

    if ($pass eq "") {
        $sftp = Net::SFTP::Foreign->new($dest, port => $port, key_path => $pkey,
                                more => [qw(-o PreferredAuthentications=publickey)]);
    } else { 
        
        $sftp = Net::SFTP::Foreign->new($dest,
                                         port => $port,
                                         user => $user,
                                         password => $pass);
    }

    $sftp->error and die $sftp->error;
    $sftp->status or $sftp->error;

    $sftp->rput("$sdir/$prevday","$ddir/$prevday") or
        die "error: trans2sftp - rput failed: " . $sftp->error;

    return;
}


# transport mode: SCP
sub trans2scp {

    my ($sdir, $ddir, $prevday, $dest, $port, $user, $pass) = @_;

    require Net::SSH2;

    my $ssh2 = Net::SSH2->new();

    if( $ssh2->connect($dest, $port) ) {

        if ($pass eq "") {

            # authentication using private key
            my $pubkey = "$pkey" . ".pub";

            eval { $ssh2->auth_publickey($user, $pubkey, $pkey); 1 }
            or do {
                warn "error: trans2scp - authkey failed $@ \n", $ssh2->error;
            };

        } else {

            # authentication using private key
            eval { $ssh2->auth(username => "$user",
                                password => "$pass"); 1 }
            or do {
                warn "error: trans2scp - auth failed $@ \n", $ssh2->error;
            };

        }

        if ($verbose_flag == 1) {
            printf "info: trans2scp - auth OK: %s\n", $ssh2->auth_ok; 
        }

        my $chan = $ssh2->channel();
        $chan->shell();

        print $chan "cd $ddir\n";
        print $chan "ls -ld $prevday\n";
        my $dir_flag = 0;
        while (<$chan>) { $dir_flag = 1 if $_ =~ /$prevday/ ;}

        if($dir_flag == 0) {
            if ($verbose_flag == 1) {
                print "info: trans2scp - generating $prevday on: $dest\n";
            }
            print $chan "mkdir $prevday\n";
        }

        # copy now all raw files into prevdir
        opendir(PREVDAY, "$sdir/$prevday") or 
            die "error: trans2scp - can't open $sdir/$prevday: $!";
        my @sdrdf = grep {!/^\.+$/} readdir(PREVDAY);
        close(PREVDAY);

        foreach my $sdrd (@sdrdf) {
            next if $sdrd !~ /.*\.sdrd\.0\.gz$/;
            $ssh2->scp_put("$sdir/$prevday/$sdrd", "$ddir/$prevday/$sdrd") or 
                die "error: trans2scp - cannot copy daily data: " , $ssh2->error;
        }

        # close the ssh2 channel for shell 
        $chan->close;

    } else {
        warn "error: trans2scp - connect failed $@ \n", $ssh2->error;
    }

    return;

}


sub rotate {

    my($rawdir, $dailydir, $pdir) = @_;

    opendir(DIR, $rawdir) or 
        die "error: rotate - Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$pdir";

    my @sdrd_files;

    foreach my $sdrd (@files) {
        next if $sdrd !~ /.*\.sdrd\.0\.gz$/;
        push @sdrd_files, $sdrd;
    }

    if ($verbose_flag == 1) {
        printf "%s %d\n", "info: rotate - copying sdrd data files:", $#sdrd_files +1;
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if (($#sdrd_files+1) > 0) {
   
        # make daily target dir
        unless(mkdir $dest) {
            die "error: rotate - cannot create destination $pdir, already exists\n";
        }

        foreach my $dir (@sdrd_files) {
            move("$rawdir/$dir","$dest") or
                die "error: rotate - copying previous daily data, $!\n";
            $cnt++;
        }
    }

    # return number of raw sdrd files moved to daily
    return $cnt;
}


# Open XML configuration file
sub open_conf {

    my ($conf) = @_;
    my $tree;

    my $parser = XML::LibXML->new();
    $parser -> keep_blanks(0);

    # we will validate sdr.conf later releases
    # $parser->validation(1);

    # we will parse now the file
    if ( defined $ENV{'SDR_ROOT'} ) {
        if (-e "$ENV{'SDR_ROOT'}/etc/$conf") {
            $tree = $parser->parse_file("$ENV{'SDR_ROOT'}/etc/$conf");
        } else {
            print "Error: $! $ENV{'SDR_ROOT'}/etc/$conf \n";
            usage();
        }
    } else {
        if (-e "/opt/sdr/etc/$conf") {
            $tree = $parser->parse_file("/opt/sdr/etc/$conf");
        } else {
            print "Error: $! /opt/sdr/etc/$conf \n";
            usage();
        }
    }

    # return the tree configuration
    return $tree;
}


# return an array of hashes
sub get_values {
    my ($conf, $path, $id) = @_;

    my @result;

    #XPath Walking
    my @childs = $conf -> findnodes ($path);
    foreach my $node (@childs) {
        push @result, {
            $node->getAttribute('name') .
            ":" .
            $node->getAttribute('ver') ,
            $node->getAttribute('site') };
    }


    return @result;
}


sub trans2http {

    my ( $curl, $dest, $sdrid, $destdir, $shipment, $hport, $hproxy, $hproxyport) = @_;

    my $response;

    if ( $verbose_flag == 1 ) {
        printf "%s\n", "info: trans2http - dest:$dest, destdir=$destdir, ship=$shipment"; 
    }
    ## uri
    # my $uri = "http://" . $dest . ":" . $hport . "/cgi-bin/trans.cgi";

    ## payload
    #my $payload = sha256sdrd($delta);
    #addlog("info: sendhttp - id=$sdrid&h=$host&db=$dbid&$payload")
    #  if ( $verbose_flag == 1 );

    ## test for HTTP proxy
    ## CURLOPT_PROXY CURLOPT_PROXYPORT
    #if ($hproxy) {
    #    $curl->setopt( WWW::Curl::Easy::CURLOPT_PROXY(),     $hproxy );
    #    $curl->setopt( WWW::Curl::Easy::CURLOPT_PROXYPORT(), $hproxyport );
    #}
    #else {
    #    $curl->setopt( WWW::Curl::Easy::CURLOPT_PROXY(), '' );
    #}

    #$curl->setopt( WWW::Curl::Easy::CURLOPT_HEADER(), 1 );
    #$curl->setopt( WWW::Curl::Easy::CURLOPT_URL(),    $uri );
    #$curl->setopt( WWW::Curl::Easy::CURLOPT_HTTPHEADER(),
    #    ['Content-Type: text/plain'] );
    #$curl->setopt( WWW::Curl::Easy::CURLOPT_POST(), 1 );
    #$curl->setopt( WWW::Curl::Easy::CURLOPT_POSTFIELDS(),
    #    "id=$sdrid&h=$host&db=$dbid&$payload" );
    #$curl->setopt( WWW::Curl::Easy::CURLOPT_WRITEDATA(), $response );

    #my $retcode = $curl->perform;

    #if ( $retcode == 0 ) {
    #    if ( $verbose_flag == 1 ) {
    #        addlog("info: sendhttp - HTTP response");
            #$response = HTTP::Response->parse($response);
            #my $xml = $response->decoded_content;
    #    }
    #}
    #else {
    #    addlog("error: sendhttp - cant send $dbid sdrd data, transport error");
    #}

    #return $retcode;
    return;
}


# tar sdrd raw data directory
sub tarsdrd {

    my ($dir) = @_;

    require Archive::Tar;

    # Create a new tar object:
    my $tar = Archive::Tar->new();

    my $sdrdp = opensdrd("$dir");

    $dir = dirname($dir);
    chdir "$dir" or
        die "error: tarsdrd - cannot change local directory: $!\n";

    foreach my $sdrd (@$sdrdp) {
        next if $sdrd !~ /.*\.sdrd\.0\.gz$/;
        my $sdrdf = $dprev . '/' . $sdrd;
        $tar->add_files($sdrdf);
    }

    # Tar sdrd files
    my $sdrdtar = '/var/tmp/sdrd.' . $sdrid . '.' . $host . '.tar';

    $tar->write($sdrdtar);

    return $sdrdtar;
}


sub rmsdrd {
    my ($file) = @_;

    if ( -e $file ) {
        if (unlink($file) > 0) { return 0; } else { return 1; }
    }

    return;
}


# opensdrd raw data directory
sub opensdrd {

    my ($dir) = @_ ;

    # copy now all raw files into prevdir
    opendir(PREVDAY, "$dir") or
        die "error: opensdrd - can't open $dir: $!\n";

    my @sdrdf = grep {!/^\.+$/} readdir(PREVDAY);
    close(PREVDAY);

    return \@sdrdf;
}


# revision - print revision and exit
sub revision {
    print STDERR <<END;
raw2day: 1.0.0, 2014-05-04
END
    exit 0;
}
