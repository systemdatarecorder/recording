#!/opt/sdr/perl/bin/perl
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;

# Debug Only
#use Data::Dumper;

#
# Command line arguments
#
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hr:vV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose_flag = defined $main::opt_v ? $main::opt_v : 0;



#
#  Variables
#
$main::opt_h = 0;
$main::opt_v = 0;
$main::opt_V = 0;
local $| = 1;


# ######### #
# MAIN BODY #
# ######### #

## store recorder list
my @recs;

## by default we process all main recorders
## if we use r option recsem turns true
my $recsem = 0;


## check for recorder list
if ( defined $main::opt_r ) {
    # check comma separator
    usage() if $main::opt_r !~ /^(((sys|cpu|disk|nic|hdw)rec?|,)*$)/;
    $recsem = 1;
    @recs = split( /,/, $main::opt_r );
}


# Command line arguments
my $cmd_arg = shift;
usage() if (! defined $cmd_arg);

## command modes
my $cmd_mode = 0;



# check on internal commands
if ( $cmd_arg eq "test" ) {
    print "testoption ON";
    if($recsem) { bist(@recs); } else { bist("all"); }
} elsif ($cmd_arg eq "run" ) {
    print "run option ON";
} else {  usage(); }



# Subroutines

## built-in self-test procedure
sub bist {

}


sub check_recorder {

    my @d;
    my $status = 0;


    # return status
    return $status;
}


# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: sdrdroid [-hvV] [-r recorder[,recorder...] command
                [-s startime] [-e endtime]
OPTIONS:
  -h help                            # help information
  -v verbose                         # verbose
  -V revision                        # revision information
  -r recorder,recorder,...           # recorder list

COMMAND:
  test                               # built-in selft-test
  run                                # run recorders
  
 eg, sdrdroid test                   # self-test all recorders
     sdrdroid -r sysrec test         # self-test sysrec
     sdrdroid -r sysrec,cpurec test  # self-test sysrec,cpurec

NOTES:
sdrdroid - A SDR Utility
END
    exit 0;
}


# revision - print revision and exit
sub revision {
    print STDERR <<END;
sdrdroid: 1.00, 2014-05-04
END
    exit 0;
}
