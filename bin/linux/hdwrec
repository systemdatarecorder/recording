#!/opt/sdr/perl/bin/perl
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use Sys::Statistics::Linux;
use POSIX qw(pause);
use Sys::Hostname;

# Debug Only
#use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $sb   = "/sys/block";
$main::opt_h = 0;  # help option
$main::opt_V = 0;  # revision option
my $loop = 0;      # current loop number
my $tp   = 0;      # time precision
my $lsb  = "/usr/bin/lsb_release";
local $| = 1;



### MAIN BODY

# Set a timer for S::S::L object
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
my $lxs = Sys::Statistics::Linux->new(
    sysinfo  => 1,
    procstats  => 1
);
### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

if ( $interval =~ /\./ ) {
    $tp = 3;
}

while (1) {

    # get stats
    my $stat = $lxs->get;
    my $si  = $stat->sysinfo;
    my $ps  = $stat->procstats;

    # hostname# hostname
    my $host = hostname;
    $host =~ s/\..*$// if $host =~ /\./;

    # hypervisor type
    my $hypervisor = "NA";

    if (-e "/sys/hypervisor/type") {
        open my $hv, "<", "/sys/hypervisor/type"
            or die "error: cannot find hypervisor type file: $!\n";
        while (<$hv>) {
                chomp;
                $hypervisor = $_;
            }
            close $hv;
        
    }
 
    # disks might become available, check disks every sample
    my $num_disk = 0;

    # get disks
    my $rdisks = get_disks();
    $num_disk =  scalar(@$rdisks);

    # fetch dist_id, os, codename
    my ($distid, $os, $codename) = "NA";

    if (-e "$lsb") {

        # safe open pipe
        # my $pid = open my $LSBINFO, "-|";
        # die "error: cannot fork: $!" unless defined $pid;

        # if ($pid == 0) {
        #     open STDERR, ">", "/dev/null" or die "$0: open: $!";
        #     exec "$lsb", "-a" or exit 1;
        #}

        open my $LSBINFO, "-|", "$lsb", "-a"
            or die "error: cannot execute lsb_release - $!";

        while (<$LSBINFO>) {
            chomp;
            $distid = $1 if $_ =~ /^Distributor ID\:\s+(.*)/; $os = $1 if $_ =~ /^Description\:\s+(.*)/; $codename = $1 if $_ =~ /^Codename\:\s+(.*)/;
        }

        close $LSBINFO;

    } else {

        # fallback on release etc info
        if (-e "/etc/redhat-release") {
            # rhel systems
            open my $rhelrel, "<", "/etc/redhat-release"
                or die "error: cannot find redhat-release: $!\n";
            while (<$rhelrel>) {
                chomp;
                $distid = "RedHatEnterpriseServer"; $os = $_; $codename = $1 if $_ =~ /.*\s+(.*)$/;
            }
            close $rhelrel;
            $codename =~ s/^\(//;
            $codename =~ s/\)$//; 
        } elsif ( -e "/etc/debian_version" ) {
            open my $debrel, "<", "/etc/debian_version"
                or die "error: cannot find debian_version: $!\n";
            while (<$debrel>) {
                chomp;
                $os="Debian $_"; $distid="Debian"; $codename="NA";
            }
            close $debrel;
        }


    }

    # fetch NICS, reset here if NIC is removed/added
    my $num_nic = 0;
    foreach my $i (split /, /, $si->{interfaces} ) {
        $num_nic++ if $i =~ /eth|wlan/;
    }

    # fetch JVMS
    my $num_jvm = `pgrep java 2>/dev/null | wc -l`;
    chomp($num_jvm);

    $num_jvm = "NA" if ($num_jvm == 0);

    # print metrics
    printf "%.${tp}f:%s:%s:%s:%s:%s:%s:%s:%d:%d:%s:%s:%d:%d:%s:%s\n",
      time, $host, $si->{arch}, $hypervisor, $os, $codename, $distid, 
      $si->{kernel} . " " . $si->{release},
      $si->{pcpucount}, $si->{tcpucount},
      $si->{memtotal}, $si->{swaptotal}, 
      $num_disk, $num_nic, $num_jvm, $si->{uptime};

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;

}



### SUBROUTINES

sub get_disks {

    my @d;

    # get disks
    opendir(my $dh, $sb)
        or die "Error: Cannot find block directory: $!\n";

    while(readdir $dh) {
        # discard parent dir
        next if ($_ =~ m/^\./);

        # exceptions
        next if ($_ =~ m/^loop|^ram/);
        next if ($_ =~ m/^fd0|^hdc/);
        next if ($_ =~ m/^md(?:[0-9])/);
        next if ($_ =~ m/^sr(?:[0-9])$/);

        # print disks
        # print "Disk: $_\n";
        push @d, "$_"; 
    }
    closedir $dh;
    
    # return array ref
    return \@d;
}  


# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: hdwrec [-hV] | [interval [count]]
 e.g. hdwrec 5       print continuously every 5 seconds
      hdwrec 1 5     print 5 times, every 1 second

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 hostname   : hostname
  #03 hdw        : machine hardware name
  #04 hypervisor : name of the hypervisor
  #05 os         : name of the operating system
  #06 codename   : codename of the operating system
  #07 distributor: name of the operating system distributor
  #08 kernel     : kernel version and release number
  #09 pcpu       : number of physical installed CPUs, number
  #10 vcpu       : number of virtual CPUs, number
  #11 memtotal   : total physical memory installed, number
  #12 swaptotal  : total physical swap installed, number
  #13 disks      : total number of disks, number
  #14 nics       : total number of NICs, number
  #15 jvms       : total number of running JVMs, number
  #16 uptime     : how long the system has been running, number 
END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
hdwrec: 1.0.0, 2014-05-04
END
    exit 0;
}
