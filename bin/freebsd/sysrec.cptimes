#!/opt/sdr/perl/bin/perl
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use BSD::Sysctl qw(sysctl);
use POSIX qw(pause);

# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $update;        # used for deltas
my %old_cpudata;   # cpu_stats data
my $loop = 0;      # current loop number
$main::opt_h = 0;  # help option
$main::opt_V = 0;  # revision option
my $tp = 0;        # time precision
my $pgfactor = 4;  # default pagesize factor
local $| = 1;      # autoflush



### MAIN BODY

# Set a timer for BSD::Sysctl objects
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
my $bcpu     = BSD::Sysctl->new( 'kern.cp_times' );
my $bhdw     = BSD::Sysctl->new( 'hw.ncpu' );
my $bpage    = BSD::Sysctl->new( 'hw.pagesize' );
my $bvma     = BSD::Sysctl->new( 'vm.stats.vm.v_active_count' );
my $bvmi     = BSD::Sysctl->new( 'vm.stats.vm.v_inactive_count' );
my $bvmw     = BSD::Sysctl->new( 'vm.stats.vm.v_wire_count' );
my $bvmc     = BSD::Sysctl->new( 'vm.stats.vm.v_cache_count' );
my $bvmf     = BSD::Sysctl->new( 'vm.stats.vm.v_free_count' );
my $bvmt     = BSD::Sysctl->new( 'vm.vmtotal' );
my $bla      = BSD::Sysctl->new( 'vm.loadavg' );
my $bswapi   = BSD::Sysctl->new( 'vm.stats.vm.v_swapin' );
my $bswappi  = BSD::Sysctl->new( 'vm.stats.vm.v_swappgsin' );
my $bswapo   = BSD::Sysctl->new( 'vm.stats.vm.v_swapout' );
my $bswappo  = BSD::Sysctl->new( 'vm.stats.vm.v_swappgsout' );
### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

while (1) {

    # fetch new values 
    my $la       = $bla->get();
    my $nproc    = $bhdw->get();
    my $pagesize = $bpage->get();

    # Get pagesize factor
    if ($pagesize) {
        $pgfactor = $pagesize / 1024;
    }
    ## debug
    # print "pagesize=$pagesize, factor=$pgfactor\n";

    my $cid = 0;

    ## debug
    # print @cpudata;
    # print $#cpudata;

    ## CPU stats
    my @cpudata = get_cpustat($nproc);
    my ($cpupct,$sumpct,$headpct,$user,$nice,$sys,$intr,$idle);

    foreach my $values (@cpudata) {

        $values =~ s/\:$//;

        my ($u, $n, $s, $r, $i ) = split /:/, $values;

        # across all cpus

        ## debug
        # print "new: $u, $n, $s, $r, $i\n";

        # old values
        my ($old_u, $old_n, $old_s, $old_r, $old_i);

        if (defined $old_cpudata{$cid}) {
            ($old_u, $old_n, $old_s, $old_r, $old_i) = 
                split /:/, $old_cpudata{$cid};
            ##
            # print "old: $old_u, $old_n, $old_s, $old_r, $old_i\n";

        } else {
            $old_u = $old_n = $old_s = $old_r = $old_i = 0;
        }


        my $ticks = cpu_ticks($old_u, $u);
        $ticks = $ticks + cpu_ticks($old_n, $n);
        $ticks = $ticks + cpu_ticks($old_s, $s);
        $ticks = $ticks + cpu_ticks($old_r, $r);
        $ticks = $ticks + cpu_ticks($old_i, $i);

        my $etime = $ticks; 
        if ($etime == 0) { $etime = 1; }

        my $percent = 100 / $etime;
      
        $user     = delta($old_u, $u) * $percent;
        $nice     = delta($old_n, $n) * $percent;
        $sys      = delta($old_s, $s) * $percent;
        $intr     = delta($old_r, $r) * $percent;
        $idle     = delta($old_i, $i) * $percent;
        $cpupct   = $user + $nice + $sys + $intr;
        $sumpct   = $cpupct * $nproc;
        $headpct  = ($nproc * 100) - $sumpct;

        $old_cpudata{$cid} = "$u:$n:$s:$r:$i";

    }

    ## memory stats
    my @vm = get_vmstat($pgfactor);

    ## disk stats
    my $ts = $interval / 3;
    my @ds = get_diskstat($ts);

    printf "%.${tp}f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%d:%d:%d:%d:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f\n",
            time, $cpupct, $sumpct, $headpct,
            $user, $nice, $sys, $intr, $idle,
            $vm[0], $vm[1], $vm[2], $vm[3], $vm[4],
            $vm[5], $vm[6], $vm[7], $vm[8], $vm[9], $vm[10],
            $vm[11], $vm[12], $vm[13], $vm[14],
            $ds[0], $ds[1], $ds[2], $ds[3], $ds[4], $ds[5], 
            $ds[6],
            $la->[0], $la->[1], $la->[2];


    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;

}


### SUBROUTINES

# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: sysrec [-hV] | [interval [count]]
 e.g. sysrec 5       print continuously, every 5 seconds
      sysrec 1 5     print 5 times, every 1 second

 FIELDS:
  CPU
   #01 timestamp  : seconds since Epoch, time
   #02 cpupct     : cpu utilization, across all cpus, number
   #03 sumpct     : sum of all cpus utilization, number
   #04 headpct    : headroom cpu available, all cpus, number
   #05 userpct    : cpu utilization, user space in percent, number
   #06 nicepct    : cpu utilization, user space with nice priority, number
   #07 sysct      : cpu utilization, system space, number
   #08 irqpct     : cpu percentage servicing interrupts, number
   #09 idlepct    : cpu utilization, idle state, number
   #10 runqsz     : run queue length, tasks waiting for run time, number
   #11 blocked    : processes blocked for resources, number
   #12 pagewait   : processes blocked for paging, number
   #13 diskwait   : processes blocked for disk io, number
   #14 sleeping   : processes sleeping, number

  MEM
   #15 active     : size of active memory pages in kilobytes, number
   #16 inactive   : size of inactive memory pages in kilobytes, number
   #17 wired      : size of wired memory pages in kilobytes, number
   #18 cache      : size of memory pages on cache queue in kilobytes, number
   #19 free       : size of free memory pages in kilobytes, number
   #20 realfree   : size of real free memory in kilobytes, number
                     (inactive + cache + free)
   #21 swapin     : swap pager pageins, rate
   #22 swappgsin  : swap pager pages paged in, rate 
   #23 swapout    : swap pager pageouts, rate
   #24 swappgsout : swap pager pages paged out, rate

  DISK
   #25 reads      : read requests per second, rate
   #26 rkbytes    : read KBytes per second,rate
   #27 writes     : write requests per second, rate
   #28 wkbytes    : write KBytes per second, rate
   #29 queue      : the number of not yet completed transactions, rate
   #30 time       : time per transaction in miliseconds, number 
   #31 busy       : the percentage of time the device had one or more 
                     transactions outstanding, number

  NET
   #32 rxByt      : received bytes per seccond, in KB, rate
   #33 txByt      : transmitted bytes per second, in KB, rate 
   #34 ntByt      : received + transmitted bytes per second, in KB, rate
   #35 rxerr      : number of errors while received pkt per second, rate
   #36 txerr      : number of errors while transmitting pkt per second, rate
   #37 rxdrp      : number of rx packets that were dropped per second, rate
   #38 txdrp      : number of tx packets that were dropped per second, rate

   #39 avg_1      : LA of the last minute, number
   #40 avg_5      : LA of the last 5 minutes, number
   #41 avg_15     : LA of the last 15 minutes, number
END
    exit 0;
}


## revision - print revision and exit
sub revision {
    print STDERR <<END;
sysrec: 1.00, 2014-09-01
END
    exit 0;
}


## getcpu
sub get_cpustat {

    my $ncpu = shift;
    my @cdata = ();

    ### Get Stats
    my $cpu_times = $bcpu->get();

    my $len = $#{ $cpu_times };

    my $count = 0;
    my $cpuid = 0;
    my $cpusem = 0;
    my ($us, $ni, $sy, $iq, $id) = 0;

    for (my $i=0; $i<$len+1; $i++) {
         ## debug
         # print "|${ $ cpu_times}[$i]|";

         if ($count == 0) {
              $us += "${$cpu_times}[$i]";
         }

         if ($count == 1) {
             $ni += "${$cpu_times}[$i]";
         }
 
         if ($count == 2 ) {
             $sy += "${$cpu_times}[$i]";
         }

         if ($count == 3) {
             $iq += "${$cpu_times}[$i]";
         }

         if ($count == 4) {
             $id += "${$cpu_times}[$i]";
         }

         $count++;

         if ($count == 5) {
             $count=0;
         }
    }

    $us = sprintf("%.2f", $us / $ncpu);
    $ni = sprintf("%.2f", $ni / $ncpu);
    $sy = sprintf("%.2f", $sy / $ncpu);
    $iq = sprintf("%.2f", $iq / $ncpu);
    $id = sprintf("%.2f", $id / $ncpu);

    ## debug
    # print "$us $ni $sy $iq $id"; 

    my $payload = "$us:$ni:$sy:$iq:$id";

    push @cdata, $payload;

    return @cdata;
}


sub cpu_ticks {
    my ($old, $new) = @_;
    my $lticks = 0;

    my $d = delta($old, $new);
    $lticks += $d;

    return $lticks;
}


sub delta {
    my ($old, $new) = @_;
    return $new - $old;
}


sub get_vmstat {

    my $factor = shift;

    ### get mem stats
    my $vmtotal  = $bvmt->get();
    my $active   = $bvma->get();
    my $inactive = $bvmi->get();
    my $wired    = $bvmw->get();
    my $cache    = $bvmc->get();
    my $free     = $bvmf->get();
    my $swapin   = $bswapi->get();
    my $swappin  = $bswappi->get();
    my $swapout  = $bswapo->get();
    my $swappout = $bswappo->get();

    # vmtotal keys
    # my @keys = keys % { $vmtotal };
    # keys: vmsharedactive sleeping vmshared realshared diskwait 
    # realsharedactive pagewait vmactive pagefree realactive 
    # runqueue pagesize vmtotal realtotal

    # runqueue
    my $rq = $vmtotal->{runqueue} - 1;

    # pagewait, diskwait
    my $pw = $vmtotal->{pagewait};
    my $dw = $vmtotal->{diskwait};
    my $bl = $pw + $dw;

    # sleeps
    my $sp = $vmtotal->{sleeping};

    # vm stats
    $active   = $active   * $factor;
    $inactive = $inactive * $factor;
    $wired    = $wired    * $factor;
    $cache    = $cache    * $factor;
    $free     = $free     * $factor;
    my $rfree = $inactive + $cache + $free;

    my @stats;
    push(@stats, $rq, $bl, $pw, $dw, $sp, $active, $inactive, $wired, $cache, $free, $rfree, $swapin, $swappin, $swapout, $swappout);

    # print "@stats";
    # print "len=$#stats+1";

    return @stats; 
}


sub get_diskstat {

    my ($tsample) = @_;

    my $iostat = "/usr/sbin/iostat";
    my ($xr, $xbr, $xw, $xbw, $q, $r, $b) = 0;
    my ($t) = @_;

    open my $fh, "-|", "$iostat", "-x", "$tsample", "2"
      or die "cannot execute '$iostat' - $!";

    my @ds = compute_diskstat($fh);
    
    close $fh;

    return @ds;
}


sub compute_diskstat {
 
    my ($f) = @_;

    my ($reads,$kbreads,$writes,$kbwrites,$qlen,$svc,$busy) = 0;

    my $diskcount = 0;

    while (<$f>) {

        # filter out
        next if /extended/ ... /extended/;
        next if /^device|pass|cd/;

        $diskcount++;

        my ($name,$xr,$xw,$xkbr,$xkbw,$q,$s,$b) = split /\s+/, $_;

        # reads
        $reads += $xr;
        $kbreads += $xkbr;

        # writes 
        $writes += $xw;
        $kbwrites += $xkbw;
          
        # queue length
        $qlen += $q;

        # service time
        $svc += $s;

        # busy
        $busy += $b;
    }

    $reads    /= $diskcount;
    $kbreads  /= $diskcount;

    $writes   /= $diskcount;
    $kbwrites /= $diskcount;

    $qlen     /= $diskcount;
    $svc      /= $diskcount;
    $busy     /= $diskcount;

    my @stats;
    push(@stats, $reads, $kbreads, $writes, $kbwrites, $qlen, $svc, $busy);

    return @stats; 
}
