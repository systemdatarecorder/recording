#!/opt/sdr/perl/bin/perl
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use BSD::devstat;
use POSIX qw(pause);
use Test::LeakTrace;

# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $loop = 0;      # current loop number
$main::opt_h = 0;  # help option
$main::opt_V = 0;  # revision option
my $tp = 0;        # time precision
local $| = 1;      # autoflush



### MAIN BODY

# Set a timer for BSD::devstat object
# local $SIG{ALRM} = sub { };
# setitimer( ITIMER_REAL, .1, .1 );
#my $bds = BSD::devstat->new();
# ### 0.1sec sleep using a timer
# pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}


while (1) {

    leaktrace{

    # get new devstats
    my $bds = BSD::devstat->new();

    ## per disk stats 
    get_devstat($bds);

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;

    } -verbose;
}


### SUBROUTINES

# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: diskrec [-hV] | [interval [count]]
 e.g. diskrec 5       print continuously, every 5 seconds
      diskrec 1 5     print 5 times, every 1 second

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 name       : disk name, string
  #03 reads      : read requests per second, rate
  #04 rkbytes    : read KBytes per seconds, rate 
  #05 readtime   : time per read transaction in milliseconds, number
  #06 writes     : write requests per second, rate
  #07 wkbytes    : write KBytes per seconds, rate 
  #08 writetime  : time per write transaction in milliseconds, number
  #09 time       : time per transaction in miliseconds, number
  #10 queue      : the number of not yet completed transactions, rate
  #11 busy       : the percentage of time the device had one or more 
                   transactions outstanding, number
END
    exit 0;
}


## revision - print revision and exit
sub revision {
    print STDERR <<END;
diskrec: 1.00 build14, 2014-05-04
END
    exit 0;
}


sub get_devstat {

    my ($bdev) = @_;

    my (@stats);

    ## get disk stats
    for(my $i=0; $i < $bdev->numdevs; $i++) {

        my $dev = $bdev->devices($i);

        # filter the names
        next if $dev->{device_name} =~ /pass|cd/;

        my $d = "$dev->{device_name}$dev->{unit_number}";

        my $stat = $bdev->compute_statistics($i, $interval / $bdev->numdevs);
         
        # MB_PER_SECOND BLOCKS_PER_SECOND_WRITE MS_PER_TRANSACTION_WRITE 
        # KB_PER_TRANSFER TRANSFERS_PER_SECOND_OTHER TOTAL_TRANSFERS 
        # MB_PER_SECOND_READ QUEUE_LENGTH BLOCKS_PER_SECOND_READ TOTAL_BYTES_FREE 
        # BLOCKS_PER_SECOND_FREE TOTAL_TRANSFERS_WRITE MB_PER_SECOND_WRITE 
        # TOTAL_BYTES_READ TOTAL_BYTES TOTAL_BLOCKS_FREE TRANSFERS_PER_SECOND 
        # KB_PER_TRANSFER_READ MS_PER_TRANSACTION_OTHER TOTAL_TRANSFERS_READ 
        # BUSY_PCT BLOCKS_PER_SECOND TOTAL_TRANSFERS_FREE TOTAL_BLOCKS_WRITE 
        # TOTAL_TRANSFERS_OTHER TOTAL_BLOCKS MB_PER_SECOND_FREE 
        # TRANSFERS_PER_SECOND_WRITE TOTAL_BLOCKS_READ TRANSFERS_PER_SECOND_READ 
        # TOTAL_BYTES_WRITE MS_PER_TRANSACTION_FREE TRANSFERS_PER_SECOND_FREE 
        # KB_PER_TRANSFER_WRITE MS_PER_TRANSACTION KB_PER_TRANSFER_FREE 
        # MS_PER_TRANSACTION_READ

        my $xr  = $stat->{TRANSFERS_PER_SECOND_READ};
        my $xbr = $stat->{MB_PER_SECOND_READ} * 1024;
        my $rr  = $stat->{MS_PER_TRANSACTION_READ};
         
        my $xw  = $stat->{TRANSFERS_PER_SECOND_WRITE};
        my $xbw = $stat->{MB_PER_SECOND_WRITE} * 1024;
        my $rw  = $stat->{MS_PER_TRANSACTION_WRITE};

        my $r   = $stat->{MS_PER_TRANSACTION};
        my $q   = $stat->{QUEUE_LENGTH};
        my $b   = $stat->{BUSY_PCT};
 
        printf "%.${tp}f:%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f\n",
               time, $d, 
               $xr, $xbr, $rr,
               $xw, $xbw, $rw, 
               $r, $q, $b;
    }

    return;
}
