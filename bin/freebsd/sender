#!/opt/sdr/perl/bin/perl
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use File::Tail;
use File::Basename;
use Digest::SHA;
use WWW::Curl::Easy;
use Getopt::Std;
use XML::LibXML;
use XML::LibXML::XPathContext;
use Proc::Daemon;
use Proc::PID::File;
use Sys::Hostname;
use Socket;
use Time::HiRes;
use UUID::Tiny ':std';


###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('T:hvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose_flag = defined $main::opt_v ? $main::opt_v : 0;

# timeout
my $timeout = defined $main::opt_T ? $main::opt_T : 25;

# process [interval]
my $interval;

if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    usage() if $interval == 0;
}
else {
    $interval = 60;
}


###  Variables
$main::opt_h        = 0;               # help option
$main::opt_V        = 0;               # revision option
my $xmlcnf          = 'sdr.xml';       # sdr configuration file
my $tcpka           = 0;               # transport TCP keepalive settings
my $sid             = "";              # subscription id
my $conf;                              # object configuration 
my ($dr, $dest);
my ( @files, @dbs );
my ( $sdr_baselog, $sdr_curlog );      # log settings

my $transport_port  = 443;             # default transport port
my $transport_proto = "https";         # default transport protocol

my ( $transport_proxy, 
     $transport_proxyport );          # transport proxy settings

local $| = 1;



### MAIN BODY #

# Default sdrd
my @recs = qw(sys cpu disk nic hdw);

# daemon name
my $dname = basename($0);

# host UUID
my $hostid;

# osname
my $osname= "$^O";


# read XML configurations
# get sdr.conf config
# validate and open configuration xml
$conf = open_conf($xmlcnf);

# Recording XML Configuration
# check for: base_log current_log private_key
my @log_childs = $conf->findnodes("/systemdatarecorder/logs/*");

my $rchilds = 0;

foreach my $node (@log_childs) {

    next if $node->nodeName() !~ /base|current/;

    if ( $node->nodeName() =~ /base/ ) {
        $sdr_baselog = $node->getAttribute('path');
    } elsif ( $node->nodeName() =~ /current/ ) {
        $sdr_curlog = $node->getAttribute('path');
    }

    $rchilds++;
}

# check errors
if ( $rchilds == 0 ) {
    die "error: main - wrong configuration file: $xmlcnf, ",
      "$rchilds recording elements found \n";
}


# check hostid
$hostid = $conf->getChildrenByTagName('hostid');
print "hostid=$hostid\n";
exit 0;


# check subscription destination protocol keepalive

# sender logfile
my $slog = $sdr_baselog . "/sender.log";

my @scfg = $conf->findnodes("/systemdatarecorder/transport/*");

foreach my $node (@scfg) {

    # subscription
    if ( $node->nodeName() =~ /subscription/ ) {
        $sid = $node->textContent();
    }

    # destination
    if ( $node->nodeName() =~ /destination/ ) {
        $dr = $node->textContent();
    }

    # protocol type
    if ( $node->nodeName() =~ /protocol/ ) {
        $transport_proto = $node->textContent();
    }

    # keepalive
    if ( $node->nodeName() =~ /tcp_keepalive/ ) {
        $tcpka = $node->textContent();
    }
}

my @sdcfg = $conf->findnodes("/systemdatarecorder/transport/data/*");
my $schilds   = 0;

foreach my $node (@sdcfg) {

    # sdrd data
    next if $node->nodeName() !~ /sdrd/;
    push @dbs, $node->getAttribute('name');
    $schilds++;
}

die "error: main - no destination found, check sdr.conf\n"
  if ( !$dr );

# check errors
@dbs = @recs if ( $schilds == 0 );

# transport modes
my ( $https_flag, $http_flag ) = 0;

### transport

   if ( $transport_proto =~ /https/  ) { $https_flag  = 1; }
elsif ( $transport_proto =~ /http/   ) { $http_flag   = 1; }
 else                                  { $https_flag  = 1; }
   

# Analytics Destination
my @res = $conf->findnodes('//host');

foreach my $node (@res) {

    # destination
    $dest = $node->getAttribute('name');

    if ( $dr eq $dest ) {

        if ( $node->getElementsByTagName('https') ) {
            my @tsettings =
              get_transport( $conf,
                "/systemdatarecorder/analytics/host[\@name=\"$dest\"]/https/*" );

            if ( $#tsettings == 0 ) { $transport_port      = $tsettings[0]; }
         elsif ( $#tsettings == 1 ) { $transport_port      = $tsettings[0];
                                      $transport_proxy     = $tsettings[1]; }
         elsif ( $#tsettings == 2 ) { $transport_port      = $tsettings[0];
                                      $transport_proxy     = $tsettings[1];
                                      $transport_proxyport = $tsettings[2]; }

        } elsif ( $node->getElementsByTagName('http') ) {
            my @tsettings =
              get_transport( $conf,
                "/systemdatarecorder/analytics/host[\@name=\"$dest\"]/http/*" );

            if ( $#tsettings == 0 ) { $transport_port      = $tsettings[0]; }
         elsif ( $#tsettings == 1 ) { $transport_port      = $tsettings[0];
                                      $transport_proxy     = $tsettings[1]; }
         elsif ( $#tsettings == 2 ) { $transport_port      = $tsettings[0];
                                      $transport_proxy     = $tsettings[1];
                                      $transport_proxyport = $tsettings[2]; }
        }

        ## we found a match
        last;
    }
}

die "error: main - no subscription defined, check sdr.conf\n"
    if (! $sid);

die "error: main - no such \'$dr\' destination, check sdr.conf\n"
  if ($dr ne $dest);



# Daemonize
eval {
    Proc::Daemon::Init(
        {
            child_STDOUT => "+>>$slog",
            child_STDERR => "+>>$slog"
        }
    );
};

if ($@) {
    die "error: boot - cannot start daemon: $@";
}
else {
    addlog("info: boot - daemon $dname initialized");
}

# If already running, then exit
if ( Proc::PID::File->running( { dir => "$sdr_baselog" } ) ) {
    exit(0);
}

### Log basic information

### HTTPS or HTTP
if ( $transport_proxy and $transport_proxyport ) {
    addlog("info: main - destination=$dest, id=$sid, tcp_keepalive=$tcpka,
            HTTP port=$transport_port proxy=$transport_proxy
            proxy_port=$transport_proxyport");
} else {
    addlog("info: main - destination=$dest, id=$sid, tcp_keepalive=$tcpka,
            HTTP port=$transport_port");
}

# cd sdrd raw data directory
chdir("$sdr_curlog")
  or die "error: main - cannot open SDR sdrd raw data directory, $!\n";

foreach (@dbs) {
    my $n = $_ . "rec.sdrd";
    push(
        @files,
        File::Tail->new(
            name               => "$n",
            interval           => 1,
            maxinterval        => $interval,
            ignore_nonexistant => 1
        )
    );
}

# check transport
my ( $s2, $http );


# init HTTP transport
$http = WWW::Curl::Easy->new;

if ($tcpka) {
    $http->setopt( WWW::Curl::Easy::CURLOPT_TCP_KEEPALIVE(), 1 );
}


# main loop
while (1) {

    my ( $nfound, $timeleft, @pending ) =
      File::Tail::select( undef, undef, undef, $timeout, @files );

    # timeout - do something else here, if you need to
    unless ($nfound) {
        addlog("info: main - no sdrd raw data found, checking...")
          if ( $verbose_flag == 1 );

        #my @ints;
        #foreach(@files) {
        #    push(@ints,$_->interval);
        #}
        #print "Nothing new! - ".localtime(time)."(".join(",",@ints).")\n";

    }
    else {
        addlog("info: main - sdrd raw data found")
          if ( $verbose_flag == 1 );

        my $rcode = 0;
        foreach (@pending) {
            my $delta = $_->read;
            chomp($delta);

            # parse id
            my $dbid;
            
            if ( $_->{"input"} =~ /sysrec/ )  { $dbid = 'cpd-linux-sysrec';  }
         elsif ( $_->{"input"} =~ /cpurec/ )  { $dbid = 'cpd-linux-cpurec';  }
         elsif ( $_->{"input"} =~ /diskrec/ ) { $dbid = 'cpd-linux-diskrec'; }
         elsif ( $_->{"input"} =~ /nicrec/ )  { $dbid = 'cpd-linux-nic';  }
         elsif ( $_->{"input"} =~ /netrec/ )  { $dbid = 'cpd-linux-net';  }
         elsif ( $_->{"input"} =~ /jvmrec/ )  { $dbid = 'cpd-linux-jvm';  }
         elsif ( $_->{"input"} =~ /procrec/ ) { $dbid = 'cpd-linux-proc'; }
         elsif ( $_->{"input"} =~ /zonerec/ ) { $dbid = 'zone'; }
         elsif ( $_->{"input"} =~ /webrec/ )  { $dbid = 'web';  }
         elsif ( $_->{"input"} =~ /hdwrec/ )  { $dbid = 'hdw';  }
         elsif ( $_->{"input"} =~ /xenrec/ )  { $dbid = 'xen';  }
                

         print "\n" . $_->{"input"} . " payload[" . $delta . "]"
             if ( $verbose_flag == 1 );

         ## http transport mode
         # my $hstat = trans2http( $http, $dest, $sid, $dbid, $delta, 
         #                         $transport_port, $transport_proxy, 
         #                          $transport_proxyport );
           
        }
    }
}



### Subroutines


## add log message
sub addlog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
      $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    print "\n$dt $logbuf";

    return;
}


## return transport settings
sub get_transport {

    my ( $conf, $path ) = @_;
    my ( $port, $proxy, $proxyport );
    my @result;

    #XPath Walking
    my @childs = $conf->findnodes($path);

    foreach my $node (@childs) {

        if ( $node->nodeName() =~ /^port$/ ) { 
            $port = $node->textContent();
        } elsif ( $node->nodeName() =~ /^proxy$/ ) {
            $proxy = $node->textContent(); 
        } elsif ( $node->nodeName() =~ /^proxyport$/ ) {
            $proxyport = $node->textContent();
        }
    }

    if ( defined($proxy) and defined($proxyport) ) {
        push @result, ( $port, $proxy, $proxyport );
    }
    else {
        push @result, $port;
    }

    ## debug
    # print "port=$port proxy=$proxy proxyport=$proxyport \n";

    # return array of coordinates for http or ssh2
    return @result;
}

## send payload over HTTP
sub trans2http {

    my ( $curl, $dest, $sid, $dbid, $delta, $hport, $hproxy, $hproxyport ) = @_;
    my $response;

    ## uri
    my $uri = "http://" . $dest . ":" . $hport . "/cgi-bin/trans.cgi";

    ## payload
    my $payload = sha256sdrd($delta);
    addlog("info: trans2http - id=$sid&h=$hostid&db=$dbid&$payload")
      if ( $verbose_flag == 1 );

    ## test for HTTP proxy
    ## CURLOPT_PROXY CURLOPT_PROXYPORT
    if ($hproxy) {
        $curl->setopt( WWW::Curl::Easy::CURLOPT_PROXY(),     $hproxy );
        $curl->setopt( WWW::Curl::Easy::CURLOPT_PROXYPORT(), $hproxyport );
    }
    else {
        $curl->setopt( WWW::Curl::Easy::CURLOPT_PROXY(), '' );
    }

    $curl->setopt( WWW::Curl::Easy::CURLOPT_HEADER(), 1 );
    $curl->setopt( WWW::Curl::Easy::CURLOPT_URL(),    $uri );
    $curl->setopt( WWW::Curl::Easy::CURLOPT_HTTPHEADER(),
        ['Content-Type: text/plain'] );
    $curl->setopt( WWW::Curl::Easy::CURLOPT_POST(), 1 );
    $curl->setopt( WWW::Curl::Easy::CURLOPT_POSTFIELDS(),
        "id=$sid&h=$hostid&db=$dbid&$payload" );
    $curl->setopt( WWW::Curl::Easy::CURLOPT_WRITEDATA(), $response );

    my $retcode = $curl->perform;

    if ( $retcode == 0 ) {
        if ( $verbose_flag == 1 ) {
            addlog("info: trans2http - $dbid sdrd data delivered");
            #$response = HTTP::Response->parse($response);
            #my $xml = $response->decoded_content;
        }
    }
    else {
        addlog("error: trans2http - cant send $dbid sdrd data, transport error");
    }

    return $retcode;
}


## NIST SHA-256 message digest for sdrd raw data
sub sha256sdrd {
    my ($sdrd) = @_;

    # idkey
    my $tid = ':73:79:73:74:65:6d:64:61:74:61:72:65:63:6f:72:64:65:72';

    my $tsdrd = $sdrd . $tid;

    addlog("info: sha256sdrd - payload=$tsdrd")
      if ( $verbose_flag == 1 );

    # split up the sdrd data
    my @fields = split( /:/, $tsdrd );

    # compute SHA-256
    my $state = Digest::SHA->new(256);
    for (@fields) {
        $state->add($_);
    }

    my $digest = $state->hexdigest;

    $sdrd = "p=" . $sdrd . "&c=$digest";

    return $sdrd;
}


## open XML configuration file
sub open_conf {

    my ($conf) = @_;
    my $tree;

    my $parser = XML::LibXML->new();
    $parser->keep_blanks(0);

    # we will validate sdr.xml later releases
    # $parser->validation(1);

    # we will parse now the file
    if ( defined $ENV{'SDR_ROOT'} ) {
        if ( -e "$ENV{'SDR_ROOT'}/etc/$conf" ) {
            $tree = $parser->parse_file("$ENV{'SDR_ROOT'}/etc/$conf");
        }
        else {
            print "error: open_conf - $! $ENV{'SDR_ROOT'}/etc/$conf \n";
            usage();
        }
    }
    else {
        if ( -e "/opt/sdr/etc/$conf" ) {
            $tree = $parser->parse_file("/opt/sdr/etc/$conf");
        }
        else {
            print "error: open_conf - $! /opt/sdr/etc/$conf \n";
            usage();
        }
    }

    # return the tree configuration
    return $tree;
}


## host UUID creation
sub new_uuid {

    my $os = @_;

    my $hid = create_uuid_as_string(UUID_V5, $os);

    # return hostid
    return $hid;
}


## usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: sender [-T secs] [-FhV] | [interval]
OPTIONS:
  -F        : force new host identification
  -T        : timeout in seconds
  -h        : help information
  -V        : release version
  interval  : maximum number of seconds between samples, default 60, will 
              never spend more than that without checking data

 e.g. sender     check and send sdrd raw data, every 60 secs
      sender 10  check and send sdrd raw data, every 10 secs
END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
sender: 1.00, 2014-05-04
END
    exit 0;
}

