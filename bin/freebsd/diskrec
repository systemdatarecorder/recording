#!/opt/sdr/perl/bin/perl
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use BSD::Sysctl qw(sysctl);
use BSD::devstat;
use POSIX qw(pause);

# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my %old_cpudata;   # cpu_stats data
my $loop = 0;      # current loop number
$main::opt_h = 0;  # help option
$main::opt_V = 0;  # revision option
my $tp = 0;        # time precision
local $| = 1;      # autoflush



### MAIN BODY

# Set a timer for BSD::Sysctl object
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
my $bds = BSD::devstat->new();
### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

while (1) {

    # get new devstats
    $bds = BSD::devstat->new();

 
    # get dev stats
    ## debug
    # printf "Number of devices: %d\n", $bds->numdevs;
   
    get_devstat($bds);
 

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;

}


### SUBROUTINES

# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: diskrec [-hV] | [interval [count]]
 e.g. diskrec 5       print continuously, every 5 seconds
      diskrec 1 5     print 5 times, every 1 second

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 cpuid      : cpuid, number
  #03 userpct    : cpu utilization, user space, number
  #04 nicepct    : cpu utilization, user space nice priority, number
  #05 syspct     : cpu utilization, system space, number
  #06 irqpct     : cpu percentage servicing interrupts, number
  #07 idlepct    : cpu utilization, idle state, number
  #08 totalpct   : total cpu utilization, number
END
    exit 0;
}


## revision - print revision and exit
sub revision {
    print STDERR <<END;
cpurec: 1.00 build14, 2014-05-04
END
    exit 0;
}


sub get_devstat {

    my $bdev = shift;

    ## get disk stats
    # priority creation_time_frac duration_free_sec operations_other 
    # device_name busy_time_sec duration_read_sec tag_simple duration_write_sec i
    # block_size operations_write duration_free_frac flags duration_read_frac 
    # duration_write_frac bytes_write creation_time_sec operations_free 
    # busy_time_frac bytes_free bytes_read tag_ordered device_type tag_head 
    # operations_read unit_number

    for(my $i=0; $i < $bdev->numdevs; $i++) {

         my $dev = $bdev->devices($i);

         # filter the names
         next if $dev->{device_name} =~ /pass|cd/;

         my $stat = $bds->compute_statistics($i, 0.1);
         
         my @keys = keys % { $stat };
         print "@keys";

    }

    # my $devidx = $bds->numdevs;    # this is last device.

    # my $dev = $bds->devices(0);
    # my @keys = keys % { $dev };

    # foreach my $k (@keys) {
    #     print "$k\n";
    # }

    # printf "%s%d %d %d \n", $dev->{device_name},
    # $dev->{unit_number}, $dev->{block_size}, $dev->{bytes_written};

    # Stat in 2 seconds.
    # my $stat = $bds->compute_statistics($devidx, 2.0);
    # printf "BUSY_PCT=%.2f\n", $stat->{BUSY_PCT};

    # my @stats;
    # push(@stats, $rq, $bl, $pw, $dw, $sp, $active, $inactive);

    # print "@stats";
    # print "len=$#stats+1";

    # return @stats; 
}
