#!/opt/sdr/perl/bin/perl

# COPYRIGHT: Copyright (c) 2013 System Data Recorder
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# SDR VERSION: 0.74.2

use strict;
use warnings;
use 5.010;
use Getopt::Std;
use Date::Calc qw{:all};
use Time::HiRes qw(gettimeofday);
use File::Copy;
use Sys::Hostname;
use XML::LibXML;
use XML::LibXML::XPathContext;


# Debug Only
# use Data::Dumper;

# Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hvVt:q') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;
usage() if (($#ARGV+1) > 10);
my $verbose_flag = defined $main::opt_v ? $main::opt_v : 0;
my $quiet_flag = defined $main::opt_q ? $main::opt_q : 0;

# Global Vars

my $port = 22;
my $trans_flag = 0;
my $osname     = $^O;
my $xmlcnf     = 'sdr.conf';  # sdr configuration
$main::opt_h   = 0 ;          # help option
$main::opt_V   = 0;           # revision option

my $conf;

local $| = 1;                 # autoflush


# ######### #
# MAIN BODY #
# ######### #

my $ttype;
my ($sdr_current, $sdr_daily, $pkey);

#start counting here
my $tstart = gettimeofday();

# check modules
my $argv_flag = 0;
$argv_flag = 1 if (($#ARGV+1) > 0);


# check for transport mode
if (defined $main::opt_t) {
    # check for separator
    usage() if $main::opt_t !~ /(ftp|scp|sftp)/i;
    $ttype = $main::opt_t;
    $trans_flag = 1;
}

my $host = hostname;
$host =~ s/\..*$// if $host =~ /\./;

# get sdr.conf config
# validate and open configuration xml
$conf = open_conf($xmlcnf);

# Recording Config XML
# check for: current_log daily_log
my @rec_childs = $conf -> findnodes("/sdr/recording/*");

my $rchilds = 0;
foreach my $node (@rec_childs) {

    next if $node -> nodeName() !~ /current_log|daily_log|private_key/;

    given($node -> nodeName()) {

        # current_log
        when(/current_log/) {
            $sdr_current = $node -> getAttribute('path');  }

        # daily_log
        when(/daily_log/) {
            $sdr_daily = $node -> getAttribute('path');  }

        # private_key
        when(/private_key/) {
            $pkey = $node -> getAttribute('path');  }

    }

    $rchilds++;
}


# check errors
if ($rchilds == 0) {
    die "Error: wrong configuration file: $xmlcnf, " ,
          "$rchilds recording elements found \n";
}

if (!($sdr_current)) {
    die "Error: wrong configuration file: $xmlcnf, ",
          "current_log not found\n";
}

if (!($sdr_daily)) {
    die "Error: wrong configuration file: $xmlcnf, ",
          "daily_log not found\n";
}


# Verbose Messages
if ($verbose_flag == 1) {
    print "SDR Recording: $host \n";
}

if ($verbose_flag == 1) {
    print " current log: $sdr_current \n";
    print " daily log: $sdr_daily \n";
}

my $dprev = get_yesterday();

if ($verbose_flag == 1) {
    printf "%s %s\n", " daily data:", $dprev;
}

# Current to Daily
my $dsdrd = current2daily($sdr_current, $sdr_daily, $dprev);

# Verbose Messages
if ($verbose_flag == 1) {
    printf "%s %d\n", " transferred sdrd files to daily log:", $dsdrd;
}


# Transport Mode

# Verbose Messages
if ($verbose_flag == 1) {
    print "SDR Reporting\n";
    given ($trans_flag) {
        when(0) { printf "%s\n", " transport to reporting: OFF"; }
        when(1) { printf "%s\n", " transport to reporting: ON";  }
    }
}


# Reporting Config XML
# check dest, user, pass, docroot

my ($db_path, $dc_path, $dest, $user, $pass);

# get db_path, dc_path
my @rep_childs = $conf -> findnodes("/sdr/reporting/*");
foreach my $node (@rep_childs) {
    # print $node -> nodeName() . "\n";

    # filter out splitmerge, create or update if any
    next if $node -> nodeName() !~ /db|docroot/;
  
    # selection by node name
    given($node -> nodeName()) {

        # db
        when(/db/) {
            $db_path = $node -> getAttribute('path');  }

        # docroot
        when(/docroot/) {
            $dc_path = $node -> getAttribute('path');  }
    }
}

# XPATH Method
my @res = $conf -> findnodes('//host');

foreach my $node (@res) {
    # DOM Method
    $dest = $node -> getAttribute ('name');

    # ssh2 port
    if ($node -> getElementsByTagName('ssh2port')) {
        $port = $node -> getElementsByTagName('ssh2port');
    }

    $user = $node -> getElementsByTagName('username');
    $pass = $node -> getElementsByTagName('password');
    
    if ($argv_flag) {
        for my $h ( 0 .. $#ARGV ) {
            next if ($ARGV[$h] ne $dest);
            transport($ARGV[$h], $port, $user, $pass);
        }
    } else {
        transport($dest, $port, $user, $pass);
    }
}


# Mark End of Time
my $tend = gettimeofday();
my $elapsed = $tend - $tstart;
my $len = length(int($elapsed));

if ($quiet_flag == 0) {
    if ($len > 2) {
        # we are working in minutes
        $elapsed = $elapsed / 60;
        printf "%s %4.2f %s", 
         "All jobs done. Elapsed time:", $elapsed, "minutes\n";
    } else {
        printf "%s %4.2f %s", 
         "All jobs done. Elapsed time:", $elapsed, "seconds\n";
    }
}



# Subroutines

# transport
sub transport {

    my ($d, $t, $u, $p) = @_;

    if ($trans_flag == 1) {
        # we need to transport data
    
        given($ttype) {

          # FTP Transport
          when(/^ftp$/i) {
              if ($verbose_flag == 1) {
                  printf "%s\n", " transport protocol: FTP";
              }
              do_ftp("$sdr_daily", "$dc_path/hosts/$host", $dprev, $d, $u, $p);
          }

          # SCP Transport
          when(/^scp$/i) { 
              if ($verbose_flag == 1) {
                  printf "%s\n", " transport protocol: SCP";
              }
              do_scp("$sdr_daily", "$dc_path/hosts/$host", $dprev, $d, $t, $u, $p);
          }

          # SFTP Transport
          when(/^sftp$/i) {
              if ($verbose_flag == 1) {
                  printf "%s\n", " transport protocol: SFTP";
              }
              do_sftp("$sdr_daily", "$dc_path/hosts/$host", "$dprev", $d, $t, $u, $p);
          }

          default { usage(); }
        }
    }

    return;
}


# get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}



# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: raw2day [-hV] [-t ftp|scp|sftp] [host...]
 e.g. raw2day               moves raw data to daily log
      raw2day -t ftp        switch transport to FTP
      raw2day -t sftp       switch transport to SFTP
      raw2day -t scp        switch transport to SCP
      raw2day -t sftp rep1  switch transport to SFTP and 
                              transport data to rep1 reporting server
NOTES:
 sdr.conf: raw2day uses sdr.conf XML configuration file !

END
    exit 0;
}


sub ftp_mput { 
    my($ftp, $pattern) = @_; 
    foreach my $file (glob($pattern)) {
        $ftp->put($file) or warn $ftp->message; 
    }
    return;
}


sub ftp_mget { 
    my($ftp, $pattern) = @_; 
    foreach my $file ($ftp->ls($pattern)) { 
        $ftp->get($file) or warn $ftp->message; 
    }
    return;
}


# transport mode: ftp
sub do_ftp {

    my ($sdir, $ddir, $prevday, $dest, $user, $pass) = @_;

    require Net::FTP;

    my $ftp = Net::FTP->new($dest, Debug => 0, Timeout=>60)
      or die "Error: FTP transport, cannot connect to $dest: $@\n";

    $ftp->login($user,$pass)
     or die "Error: FTP transport, cannot login ", $ftp->message;

    if (! $ftp->cwd("$ddir/$prevday")) {
        $ftp->mkdir("$ddir/$prevday") or
            die "Error: FTP transport, cannot make daily directory\n";

        $ftp->cwd("$ddir/$prevday");
    }


    # copy now all raw files into prevdir
    opendir(PREVDAY, "$sdir/$prevday") or
        die "Error: FTP transport, can't open $sdir/$prevday: $!\n";
    my @sdrdf = grep {!/^\.+$/} readdir(PREVDAY);
    close(PREVDAY);

    chdir "$sdir/$prevday" or 
        die "Error: FTP transport, cannot change local directory: $!\n";

    my $tftp = 0;
    foreach my $sdrd (@sdrdf) {
        next if $sdrd !~ /.*\.sdrd\.0\.gz$/;
        $ftp->put("$sdrd") or warn $ftp->message; 
        $tftp++;
    }

    $ftp->quit;

    return;
}



# transport mode: SFTP
sub do_sftp {

    my ($sdir, $ddir, $prevday, $dest, $port, $user, $pass) = @_;

    my $sftp;

    require Net::SFTP::Foreign;

    if ($pass eq "") {
        $sftp = Net::SFTP::Foreign->new($dest, port => $port, key_path => $pkey,
                                more => [qw(-o PreferredAuthentications=publickey)]);
    } else { 
        
        $sftp = Net::SFTP::Foreign->new($dest,
                                         port => $port,
                                         user => $user,
                                         password => $pass);
    }

    $sftp->error and die $sftp->error;
    $sftp->status or $sftp->error;

    $sftp->rput("$sdir/$prevday","$ddir/$prevday") or
        die "Error: SFTP transport, put failed: " . $sftp->error;

    return;
}


# transport mode: SCP
sub do_scp {

    my ($sdir, $ddir, $prevday, $dest, $port, $user, $pass) = @_;

    require Net::SSH2;

    my $ssh2 = Net::SSH2->new();

    if( $ssh2->connect($dest, $port) ) {

        if ($pass eq "") {

            # authentication using private key
            my $pubkey = "$pkey" . ".pub";

            eval { $ssh2->auth_publickey($user, $pubkey, $pkey); 1 }
            or do {
                warn "Error: SCP transport, authkey failed $@ \n", $ssh2->error;
            };

        } else {

            # authentication using private key
            eval { $ssh2->auth(username => "$user",
                                password => "$pass"); 1 }
            or do {
                warn "Error: SCP transport, auth failed $@ \n", $ssh2->error;
            };

        }

        if ($verbose_flag == 1) {
            printf "SCP transport, auth OK: %s\n", $ssh2->auth_ok; 
        }

        my $chan = $ssh2->channel();
        $chan->shell();

        print $chan "cd $ddir\n";
        print $chan "ls -ld $prevday\n";
        my $dir_flag = 0;
        while (<$chan>) { $dir_flag = 1 if $_ =~ /$prevday/ ;}

        if($dir_flag == 0) {
            if ($verbose_flag == 1) {
                print "SCP transport, generating $prevday on: $dest\n";
            }
            print $chan "mkdir $prevday\n";
        }

        # copy now all raw files into prevdir
        opendir(PREVDAY, "$sdir/$prevday") or 
            die "Error: SCP transport, can't open $sdir/$prevday: $!";
        my @sdrdf = grep {!/^\.+$/} readdir(PREVDAY);
        close(PREVDAY);

        foreach my $sdrd (@sdrdf) {
            next if $sdrd !~ /.*\.sdrd\.0\.gz$/;
            $ssh2->scp_put("$sdir/$prevday/$sdrd", "$ddir/$prevday/$sdrd") or 
                die "Error: SCP transport, cannot copy daily data: " , $ssh2->error;
        }

        # close the ssh2 channel for shell 
        $chan->close;

    } else {
        warn "Error: SCP transport, connect failed $@ \n", $ssh2->error;
    }

    return;

}


sub current2daily {

    my($rawdir, $dailydir, $pdir) = @_;

    opendir(DIR, $rawdir) or die "Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$pdir";

    my @sdrd_files;

    foreach my $sdrd (@files) {
        next if $sdrd !~ /.*\.sdrd\.0\.gz$/;
        push @sdrd_files, $sdrd;
    }

    if ($verbose_flag == 1) {
        printf "%s %d\n", " found sdrd data files:", $#sdrd_files +1;
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if (($#sdrd_files+1) > 0) {
   
        # make daily target dir
        unless(mkdir $dest) {
            die "Error: cannot create destination $pdir, already exists\n";
        }

        foreach my $dir (@sdrd_files) {
            move("$rawdir/$dir","$dest") or
                die "Error: copying previous daily data, $!\n";
            $cnt++;
        }
    }

    # return number of raw sdrd files moved to daily
    return $cnt;
}


# Open XML configuration file
sub open_conf {

    my ($conf) = @_;
    my $tree;

    my $parser = XML::LibXML->new();
    $parser -> keep_blanks(0);

    # we will validate sdr.conf later releases
    # $parser->validation(1);

    # we will parse now the file
    if ( defined $ENV{'SDR_ROOT'} ) {
        if (-e "$ENV{'SDR_ROOT'}/etc/$conf") {
            $tree = $parser->parse_file("$ENV{'SDR_ROOT'}/etc/$conf");
        } else {
            print "Error: $! $ENV{'SDR_ROOT'}/etc/$conf \n";
            usage();
        }
    } else {
        if (-e "/opt/sdr/etc/$conf") {
            $tree = $parser->parse_file("/opt/sdr/etc/$conf");
        } else {
            print "Error: $! /opt/sdr/etc/$conf \n";
            usage();
        }
    }

    # return the tree configuration
    return $tree;
}



# return an array of hashes
sub get_values {
    my ($conf, $path, $id) = @_;

    my @result;

    #XPath Walking
    my @childs = $conf -> findnodes ($path);
    foreach my $node (@childs) {
        push @result, {
            $node->getAttribute('name') .
            ":" .
            $node->getAttribute('ver') ,
            $node->getAttribute('site') };
    }


    return @result;
}


# revision - print revision and exit
sub revision {
    print STDERR <<END;
raw2day: 0.74.2, 2013-05-31
END
    exit 0;
}
