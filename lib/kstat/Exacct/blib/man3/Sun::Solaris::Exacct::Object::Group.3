.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "..::pod::Group 3"
.TH ..::pod::Group 3 "2014-09-04" "perl v5.20.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sun::Solaris::Exacct::Object::Group \- exacct group manipulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Sun::Solaris::Exacct::Object;
\& my $ea_grp = Sun::Solaris::Exacct::Object::Group\->new(
\&     &EXT_GROUP | &EXC_DEFAULT | &EXD_GROUP_PROC);
.Ve
.PP
This module is used for manipulating \f(CW\*(C`libexacct(3LIB)\*(C'\fR Group objects. A
libexacct Group object is represented as an opaque reference blessed into the
\&\f(CW\*(C`Sun::Solaris::Exacct::Object::Group\*(C'\fR class, which is a subclass of the
\&\f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR class. The Items within a Group are stored
inside a Perl array. A reference to the array can be accessed with the
inherited \fIvalue()\fR method. The individual Items within a Group can be
manipulated with the normal Perl array syntax and operators. All data elements
of the array must be derived from the \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR class.
Group objects can also be nested inside each other simply by adding an
existing Group as a data Item.
.SS "Constants"
.IX Subsection "Constants"
None.
.SS "Functions"
.IX Subsection "Functions"
None.
.SS "Class methods"
.IX Subsection "Class methods"
Class methods include those inherited from the \f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR
base class, plus the following:
.PP
\&\fB\f(CB\*(C`new($catalog, @objects)\*(C'\fB\fR
.PP
This method creates and returns a new \f(CW\*(C`Sun::Solaris::Exacct::Object::Group\*(C'\fR.
The catalog tag can be either an integer or a
\&\f(CW\*(C`Sun::Solaris::Exacct::Catalog\*(C'\fR. The catalog tag should be a valid catalog
tag for a Perl exacct Group object. The \f(CW@objects\fR parameter is a list of
\&\f(CW\*(C`Sun::Solaris::Exacct::Object\*(C'\fR to be stored inside the Group. A copy of all
the passed Items is taken and any Group objects are recursively copied. The
contents of the returned Group object can be accessed with the array returned
by the \f(CW\*(C`value()\*(C'\fR method.
.SS "Object methods"
.IX Subsection "Object methods"
\&\fB\f(CB\*(C`as_hash()\*(C'\fB\fR
.PP
This method returns the contents of the group as a hash reference. It uses the
string value of each item's catalog \s-1ID\s0 as the hash entry key and the scalar
value returned by \f(CW\*(C`value()\*(C'\fR as the hash entry value.
.PP
This form should be used if there are no duplicate catalog tags in the group.
.PP
This method and its companion \f(CW\*(C`as_hashlist()\*(C'\fR are the fastest ways to access
the contents of a Group.
.PP
\&\fB\f(CB\*(C`as_hashlist()\*(C'\fB\fR
.PP
This method returns the contents of the group as a hash reference. It uses the
string value of each item's catalog id as the hash entry key and an array of
the scalar values returned by \f(CW\*(C`value()\*(C'\fR as the hash entry value for all the
items that share a common key. This form should be used if there might be
duplicate catalog tags in the group.
.PP
This method and its companion \f(CW\*(C`as_hash()\*(C'\fR are the fastest ways to access the
contents of a Group.
.SS "Exports"
.IX Subsection "Exports"
None.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
See \f(CWattributes(5)\fR for descriptions of the following attributes:
.PP
.Vb 7
\&  _\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_
\& |       ATTRIBUTE TYPE        |       ATTRIBUTE VALUE       |
\& |_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_|
\& | Availability                | CPAN (http://www.cpan.org)  |
\& |_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_|
\& | Interface Stability         | Evolving                    |
\& |_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_|
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWSun::Solaris::Exacct(3)\fR, \f(CWSun::Solaris::Exacct::Catalog(3)\fR,
\&\f(CWSun::Solaris::Exacct::File(3)\fR, \f(CWSun::Solaris::Exacct::Object(3)\fR,
\&\f(CWSun::Solaris::Exacct::Object::Item(3)\fR, \f(CW\*(C`libexacct(3LIB)\*(C'\fR, \f(CWattributes(5)\fR
