.TH jvmrec 1  "$Date:: 2014-04-27 #$" "USER COMMANDS"
.SH NAME
jvmrec \- Java Virtual Machine GC collector. Uses jstat, perl
.SH SYNOPSIS
.B jvmrec
[-hvx] [-f pattern] | [interval [count]]

.SH DESCRIPTION
jvmrec is responsible for collecting Java Virtual Machine
garbage collection statistics. The recorder fetches all running JVMs
and extracts the GC statistics from each target process using
.I
jstat
, standard utility of the JDK. 

.PP
The recorder uses jstat and Sys::Statistics::Linux to fetch all metrics. 
The raw data is already prepared and formatted for SDR analysis process. 
The recorder runs continuously.

.SH OS
Linux 2.6+

.SH OPTIONS

.SS
\-h
help information

.SS
\-v
release information

.SS
\-f pattern
matches the JVM based on a pattern. Default values:
weblogic, tomcat or a pattern. The pattern is a perl style 
regexp expression which can describe a running Java application
or a string within Java command line arguments. The recorder will 
fetch the correct JVM based on these criterias. 

.TP
\-f weblogic
fetches one or many Java processes which belongs to a Weblogic 
application server, automatically mapping the name and PID of that
JVM.

.TP
\-f tomcat
fetches one or many JVMs which contain catalina as a search criteria.

.TP
\-f pattern
pattern is a perl regexp and can be used to filter and match whatever
type of the Java application. If the pattern contains '-Dxxxxx.Name'
or '-DxxxxName' the jvmrec will fetch those JVMs which contains this
pattern and will automatically map their name.

.SS
\-x extended statistics
enables process extended statistics along with JVM
GC data. Sometimes it is very useful to observe additional
process statistics during the GC activity: total size of the 
process, the resident memory size, for example.

.SS
interval
interval in seconds between each sample.
Make sure to dont use values lower than 1 minute since 
under busy environments to gather JVM data might take longer
than 1 minute. 

.SS
count
number of samples

.P
.SH EXAMPLES

.TP
Example 1: executes every 60 seconds 
.B # jvmrec 60 

.TP
Example 2: executes every 300 seconds matching all Weblogic JVMs
.B # jvmrec -f weblogic 300

.TP
Example 3: executes every 60secs, extended statistics ON, matches all '-DmyappName' JVMs 
.B # jvmrec -xf '-DmyappName' 60 
.PP
Automatically the recorder will fetch each JVM's name by looking for
a pattern called DmyappName=xxx, where the name of the JVM will be 
xxx and it will output along with its PID.

.PP
.SH FIELDS
.TP
#1 timestamp
the time in seconds since Epoch

.TP
#2 name
jvm name and process id
 
.TP
#3 s0pct
survivor S0 utilization, percentage, gauge

.TP
#4 s1pct
survivor S1 utilization, percentage, gauge

.TP
#5 edenpct
eden space utilization, percentage, gauge

.TP
#6 oldpct
old space utilization, percentage, gauge

.TP
#7 permpct
permanent space utilization, percentage, gauge

.TP
#8 mGC
number of young generation GC events

.TP
#9 tmGC
young generation garbage collection time, secs

.TP
#10 MGC
number of full GC events

.TP
#11 tMGC
full garbage collection time, sec

.TP
#12 totalGC
total garbage collection time, secs

.TP
#13 utime
number of jiffies scheduled in user mode

.TP
#14 stime
number of jiffies scheduled in kernel mode

.TP
#15 size
total program size of the process

.TP
#16 resident
resident set size, the text, data and stack space

.TP 
#17 nswap
size of swap space of the process

.TP 
#18 syscr
number of read syscalls

.TP
#19 rchar
bytes read from storage (might have been from pagecache)

.TP
#20 read_bytes
bytes really fetched from storage layer

.TP
#21 syscw
number of write syscalls

.TP
#22 wchar
bytes written

.TP
#23 write_bytes
bytes sent to the storage layer

.PP
.SH NOTES
jvmrec uses jstat utility, found as part of the 
standard Java Development Kit. You must have a valid 
and operational jstat utility on your system. The recorder
has been tested against Sun/Oracle's HotSpot VM. 

.PP
Make sure if running G1 garbage collector the main jdk
utilities: jmap, jstat work before running jvmrec. G1 is 
not fully supported on Java 6 therefore jvmrec might not be able 
to record GC activity if G1 collector will be in use. There are 
several issues with jstat and G1 on Java 6: 

.TP
6946385 : G1: jstat does not support G1 GC

.TP
7075646 : G1: fix inconsistencies in the monitoring data

.TP
6946417 : G1: Java VisualVM does not support G1 properly

.PP
jvmrec records 15 JVM/GC Linux OS metrics on x64 and x86 platforms !

.PP
.SH DOCUMENTATION
See SDR documentation for more details.

.SH EXIT
jvmrec will run continuously until is stopped by the master
init script or manually stopped. 

.SH AUTHOR
Stefan Parvu

.SH SEE ALSO
perl(1), jstat(1)
